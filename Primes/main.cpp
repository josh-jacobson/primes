/*          
 EECS 211
 Program 2: Primes
 
 Author:  	Josh Jacobson
 Contact:	joshj@u.northwestern.edu
 Due Date:	April 21, 2012
 
 This program includes the following functions:
 isPrime tests if a number is prime
 genPrimes generates the first MAX_NUMBER_OF_PRIMES prime numbers
 genPrimeFactors generates the prime factors of a number.
 displayPrimeFactors displays the prime factors generated by genPrimeFactors.
 
 The main function performs a basic test of all these functions by setting the first four primes and testing a few numbers for primeness, then generating the first MAX_NUMBER_OF_PRIMES prime numbers, and finally generating and displaying the prime factors of several numbers.
 
 */

#include <iostream>
using namespace std;

// Function declarations:
int isPrime(int primes[],int numprimes,int x);
int genPrimes(int primes[]);
int genPrimeFactors(int primes[], int primeFactors[], int x);
void displayPrimeFactors(int primes[], int primeFactors[], int x);

//Global variables:
int MAX_NUMBER_OF_PRIMES = 20;  // Number of primes to generate
int not_all_factors_found = 0;  // Set to 1 to indicate that not all prime factors were found by genPrimeFactors

int main() {
    
	int primes[MAX_NUMBER_OF_PRIMES], primeFactors[MAX_NUMBER_OF_PRIMES];
	int numberOfPrimes, test, j;
	
	// Set the first four primes and numberOfPrimes
	primes[0] = 2;
	primes[1] = 3;
	primes[2] = 5;
	primes[3] = 7;
	numberOfPrimes = 4;
	
	// Quick test of isPrime function - one test for each type of answer
	test = isPrime(primes, numberOfPrimes, 13);
	if(test==1)      cout << "13 is prime.\n\n";
	else if(test==0) cout << "13 is not prime.\n\n";
	else             cout << "Can't tell if 13 is prime or not.\n\n";
    
	test = isPrime(primes, numberOfPrimes, 49);
	if(test==1)      cout << "49 is prime.\n\n";
	else if(test==0) cout << "49 is not prime.\n\n";
	else             cout << "Can't tell if 49 is prime or not.\n\n";
    
	test = isPrime(primes, numberOfPrimes, 169);
	if(test==1)      cout << "169 is prime.\n\n";
	else if(test==0) cout << "169 is not prime.\n\n";
	else             cout << "Can't tell if 169 is prime or not.\n\n";
	
	
     
	// Generate the rest of the primes and display
	genPrimes(primes);
	numberOfPrimes = MAX_NUMBER_OF_PRIMES;
	for(j=0; j<MAX_NUMBER_OF_PRIMES; j++) 
		cout << "The " << j << "th prime is " << primes[j] << "\n";
	cout << "\n\n";
	

	//  Test genPrimeFactors and displayPrimeFactors
	genPrimeFactors(primes, primeFactors, 98);
	displayPrimeFactors(primes, primeFactors, 98);
	genPrimeFactors(primes, primeFactors, 5043);
	displayPrimeFactors(primes, primeFactors, 5043);
	genPrimeFactors(primes, primeFactors, 256);
	displayPrimeFactors(primes, primeFactors, 256);
	genPrimeFactors(primes, primeFactors, 98765);
	displayPrimeFactors(primes, primeFactors, 98765);

	return 0;
}

int isPrime(int primes[],int numprimes,int x) {
    // Return 0 if x<=0 or if x is divisible by one of the primes in the array (i.e., not prime)
    // Return 1 if x is prime.
    // Return -1 if we can't determine whether x is prime.
    int remainder;
    if (primes[numprimes-1]*primes[numprimes-1] >= x) {    // If this condition is true we can deterine prime-ness.
        for(int j = 0; j<numprimes ; j++) {                // Test divisibility by each prime number in primes vector
            remainder = x % primes[j];
            if (remainder == 0) return 0;                  // If divisible by a prime number, not prime.
        }
        return 1; //x is prime
    }
    else return -1; //inconclusive
}

int genPrimes(int primes[]) {
    //Generate prime numbers, starting with the 5th prime number and ending with the MAX_NUMBER_OF_PRIMES-th prime number.
    int potentialprime = 8;
    for (int i=4; i<MAX_NUMBER_OF_PRIMES; i++) {
        while (isPrime(primes, i, potentialprime) != 1) potentialprime++; //Increment potential prime until next prime found
        primes[i] = potentialprime;
    }
    return primes[MAX_NUMBER_OF_PRIMES];
}

int genPrimeFactors(int primes[], int primeFactors[], int x) {
    // Generate prime factors of x. 
    for (int i=0; i<MAX_NUMBER_OF_PRIMES; i++) {    // Loop to find prime factors
        primeFactors[i]=0;              // Set each position in primeFactors array to 0
        while (x%primes[i]==0) {        
            primeFactors[i]++;          // Increment value in primeFactors array corresponding to a prime factor
            x = x / primes[i];          // Divide x by this prime factor
        }
    }
    if (x==1) not_all_factors_found=0;  // x = 1 so all prime factors generated.
    if (x!=1) not_all_factors_found=1;  // Not possible to generate all prime factors with given range of primes.
    
    return primeFactors[MAX_NUMBER_OF_PRIMES];
}

void displayPrimeFactors(int primes[], int primeFactors[], int x) {
    cout << "The prime factors of " << x <<" are";
    for (int i=0; i<MAX_NUMBER_OF_PRIMES; i++) {
        while (primeFactors[i]!=0) {                // Loop to display each prime factor, allowing for repeated factors
            cout <<" " << primes[i];   
            primeFactors[i]--;
        }
    }
    if (not_all_factors_found==1) cout<<". Not all prime factors were found.\n";  // Notify user that not all factors found
    else cout << ".\n";
}
